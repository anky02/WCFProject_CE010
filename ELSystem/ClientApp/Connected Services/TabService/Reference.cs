//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.TabService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tab", Namespace="http://schemas.datacontract.org/2004/07/ELSystem")]
    [System.SerializableAttribute()]
    public partial class Tab : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TabIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TabNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TabUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurId {
            get {
                return this.CurIdField;
            }
            set {
                if ((this.CurIdField.Equals(value) != true)) {
                    this.CurIdField = value;
                    this.RaisePropertyChanged("CurId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TabId {
            get {
                return this.TabIdField;
            }
            set {
                if ((this.TabIdField.Equals(value) != true)) {
                    this.TabIdField = value;
                    this.RaisePropertyChanged("TabId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TabName {
            get {
                return this.TabNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TabNameField, value) != true)) {
                    this.TabNameField = value;
                    this.RaisePropertyChanged("TabName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TabUrl {
            get {
                return this.TabUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.TabUrlField, value) != true)) {
                    this.TabUrlField = value;
                    this.RaisePropertyChanged("TabUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TabService.ITabService")]
    public interface ITabService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Create", ReplyAction="http://tempuri.org/ITabService/CreateResponse")]
        void Create(ClientApp.TabService.Tab tab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Create", ReplyAction="http://tempuri.org/ITabService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(ClientApp.TabService.Tab tab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetAllTab", ReplyAction="http://tempuri.org/ITabService/GetAllTabResponse")]
        System.Data.DataSet GetAllTab(int CurId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetAllTab", ReplyAction="http://tempuri.org/ITabService/GetAllTabResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllTabAsync(int CurId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Update", ReplyAction="http://tempuri.org/ITabService/UpdateResponse")]
        bool Update(ClientApp.TabService.Tab tab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Update", ReplyAction="http://tempuri.org/ITabService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(ClientApp.TabService.Tab tab);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Read", ReplyAction="http://tempuri.org/ITabService/ReadResponse")]
        ClientApp.TabService.Tab Read(int TabId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Read", ReplyAction="http://tempuri.org/ITabService/ReadResponse")]
        System.Threading.Tasks.Task<ClientApp.TabService.Tab> ReadAsync(int TabId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Delete", ReplyAction="http://tempuri.org/ITabService/DeleteResponse")]
        bool Delete(int TabId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/Delete", ReplyAction="http://tempuri.org/ITabService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int TabId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetFileContent", ReplyAction="http://tempuri.org/ITabService/GetFileContentResponse")]
        string GetFileContent(int CourseId, string TabName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetFileContent", ReplyAction="http://tempuri.org/ITabService/GetFileContentResponse")]
        System.Threading.Tasks.Task<string> GetFileContentAsync(int CourseId, string TabName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetAllTabNames", ReplyAction="http://tempuri.org/ITabService/GetAllTabNamesResponse")]
        string[] GetAllTabNames(int CurId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabService/GetAllTabNames", ReplyAction="http://tempuri.org/ITabService/GetAllTabNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllTabNamesAsync(int CurId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITabServiceChannel : ClientApp.TabService.ITabService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TabServiceClient : System.ServiceModel.ClientBase<ClientApp.TabService.ITabService>, ClientApp.TabService.ITabService {
        
        public TabServiceClient() {
        }
        
        public TabServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TabServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TabServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TabServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(ClientApp.TabService.Tab tab) {
            base.Channel.Create(tab);
        }
        
        public System.Threading.Tasks.Task CreateAsync(ClientApp.TabService.Tab tab) {
            return base.Channel.CreateAsync(tab);
        }
        
        public System.Data.DataSet GetAllTab(int CurId) {
            return base.Channel.GetAllTab(CurId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllTabAsync(int CurId) {
            return base.Channel.GetAllTabAsync(CurId);
        }
        
        public bool Update(ClientApp.TabService.Tab tab) {
            return base.Channel.Update(tab);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(ClientApp.TabService.Tab tab) {
            return base.Channel.UpdateAsync(tab);
        }
        
        public ClientApp.TabService.Tab Read(int TabId) {
            return base.Channel.Read(TabId);
        }
        
        public System.Threading.Tasks.Task<ClientApp.TabService.Tab> ReadAsync(int TabId) {
            return base.Channel.ReadAsync(TabId);
        }
        
        public bool Delete(int TabId) {
            return base.Channel.Delete(TabId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int TabId) {
            return base.Channel.DeleteAsync(TabId);
        }
        
        public string GetFileContent(int CourseId, string TabName) {
            return base.Channel.GetFileContent(CourseId, TabName);
        }
        
        public System.Threading.Tasks.Task<string> GetFileContentAsync(int CourseId, string TabName) {
            return base.Channel.GetFileContentAsync(CourseId, TabName);
        }
        
        public string[] GetAllTabNames(int CurId) {
            return base.Channel.GetAllTabNames(CurId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllTabNamesAsync(int CurId) {
            return base.Channel.GetAllTabNamesAsync(CurId);
        }
    }
}
